// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/tabbed/pqtype"
)

type NotificationStatus string

const (
	NotificationStatusDisable NotificationStatus = "disable"
	NotificationStatusEnable  NotificationStatus = "enable"
)

func (e *NotificationStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = NotificationStatus(s)
	case string:
		*e = NotificationStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for NotificationStatus: %T", src)
	}
	return nil
}

type NullNotificationStatus struct {
	NotificationStatus NotificationStatus
	Valid              bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullNotificationStatus) Scan(value interface{}) error {
	if value == nil {
		ns.NotificationStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.NotificationStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullNotificationStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.NotificationStatus, nil
}

type Chain struct {
	ID        int64     `json:"id"`
	Name      string    `json:"name"`
	Rpcs      []string  `json:"rpcs"`
	ChainID   int64     `json:"chain_id"`
	UpdatedAt time.Time `json:"updated_at"`
}

type Email struct {
	ID        int64     `json:"id"`
	Name      string    `json:"name"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"created_at"`
}

type EmailsNotification struct {
	ID        int64     `json:"id"`
	EmailID   int64     `json:"email_id"`
	Pubkey    string    `json:"pubkey"`
	CreatedAt time.Time `json:"created_at"`
}

type Share struct {
	ID           int64                 `json:"id"`
	Pubkey       string                `json:"pubkey"`
	Data         pqtype.NullRawMessage `json:"data"`
	Enable       bool                  `json:"enable"`
	Notification NotificationStatus    `json:"notification"`
	Address      string                `json:"address"`
	CreatedAt    time.Time             `json:"created_at"`
}
