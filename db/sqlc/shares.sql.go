// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: shares.sql

package db

import (
	"context"
)

const createShare = `-- name: CreateShare :one
INSERT INTO shares (pubkey, data, address, party_id)
VALUES ($1, $2, LOWER($4), $3)
RETURNING pubkey, enable, notification, address, party_id
`

type CreateShareParams struct {
	Pubkey  string `json:"pubkey"`
	Data    []byte `json:"data"`
	PartyID string `json:"party_id"`
	Address string `json:"address"`
}

type CreateShareRow struct {
	Pubkey       string             `json:"pubkey"`
	Enable       bool               `json:"enable"`
	Notification NotificationStatus `json:"notification"`
	Address      string             `json:"address"`
	PartyID      string             `json:"party_id"`
}

func (q *Queries) CreateShare(ctx context.Context, arg CreateShareParams) (CreateShareRow, error) {
	row := q.db.QueryRowContext(ctx, createShare,
		arg.Pubkey,
		arg.Data,
		arg.PartyID,
		arg.Address,
	)
	var i CreateShareRow
	err := row.Scan(
		&i.Pubkey,
		&i.Enable,
		&i.Notification,
		&i.Address,
		&i.PartyID,
	)
	return i, err
}

const getPartyIdByPubkey = `-- name: GetPartyIdByPubkey :one
SELECT pubkey, party_id, address
FROM shares
WHERE LOWER(pubkey) = LOWER($1)
LIMIT 1
`

type GetPartyIdByPubkeyRow struct {
	Pubkey  string `json:"pubkey"`
	PartyID string `json:"party_id"`
	Address string `json:"address"`
}

func (q *Queries) GetPartyIdByPubkey(ctx context.Context, pubkey string) (GetPartyIdByPubkeyRow, error) {
	row := q.db.QueryRowContext(ctx, getPartyIdByPubkey, pubkey)
	var i GetPartyIdByPubkeyRow
	err := row.Scan(&i.Pubkey, &i.PartyID, &i.Address)
	return i, err
}

const getShare = `-- name: GetShare :one
SELECT pubkey, enable, notification, address, party_id
FROM shares
WHERE id = $1
LIMIT 1
`

type GetShareRow struct {
	Pubkey       string             `json:"pubkey"`
	Enable       bool               `json:"enable"`
	Notification NotificationStatus `json:"notification"`
	Address      string             `json:"address"`
	PartyID      string             `json:"party_id"`
}

func (q *Queries) GetShare(ctx context.Context, id int64) (GetShareRow, error) {
	row := q.db.QueryRowContext(ctx, getShare, id)
	var i GetShareRow
	err := row.Scan(
		&i.Pubkey,
		&i.Enable,
		&i.Notification,
		&i.Address,
		&i.PartyID,
	)
	return i, err
}

const getShareByAddress = `-- name: GetShareByAddress :one
SELECT pubkey, enable, notification, address, party_id
FROM shares
WHERE LOWER(address) = LOWER($1)
LIMIT 1
`

type GetShareByAddressRow struct {
	Pubkey       string             `json:"pubkey"`
	Enable       bool               `json:"enable"`
	Notification NotificationStatus `json:"notification"`
	Address      string             `json:"address"`
	PartyID      string             `json:"party_id"`
}

func (q *Queries) GetShareByAddress(ctx context.Context, address string) (GetShareByAddressRow, error) {
	row := q.db.QueryRowContext(ctx, getShareByAddress, address)
	var i GetShareByAddressRow
	err := row.Scan(
		&i.Pubkey,
		&i.Enable,
		&i.Notification,
		&i.Address,
		&i.PartyID,
	)
	return i, err
}

const getShareByID = `-- name: GetShareByID :one
SELECT pubkey, data
FROM shares
WHERE party_id = $1
LIMIT 1
`

type GetShareByIDRow struct {
	Pubkey string `json:"pubkey"`
	Data   []byte `json:"data"`
}

func (q *Queries) GetShareByID(ctx context.Context, partyID string) (GetShareByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getShareByID, partyID)
	var i GetShareByIDRow
	err := row.Scan(&i.Pubkey, &i.Data)
	return i, err
}

const listShare = `-- name: ListShare :many
SELECT pubkey, enable, notification, address, party_id
FROM shares
ORDER BY id
`

type ListShareRow struct {
	Pubkey       string             `json:"pubkey"`
	Enable       bool               `json:"enable"`
	Notification NotificationStatus `json:"notification"`
	Address      string             `json:"address"`
	PartyID      string             `json:"party_id"`
}

func (q *Queries) ListShare(ctx context.Context) ([]ListShareRow, error) {
	rows, err := q.db.QueryContext(ctx, listShare)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListShareRow{}
	for rows.Next() {
		var i ListShareRow
		if err := rows.Scan(
			&i.Pubkey,
			&i.Enable,
			&i.Notification,
			&i.Address,
			&i.PartyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
