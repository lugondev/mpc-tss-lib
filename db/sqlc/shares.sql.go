// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: shares.sql

package db

import (
	"context"

	"github.com/tabbed/pqtype"
)

const createShare = `-- name: CreateShare :one
INSERT INTO shares ( pubkey, data, enable, notification, address)
VALUES ($1, $2, true, 'enable', LOWER($3)) RETURNING id, pubkey, data, enable, notification, address, created_at
`

type CreateShareParams struct {
	Pubkey  string                `json:"pubkey"`
	Data    pqtype.NullRawMessage `json:"data"`
	Address string                `json:"address"`
}

func (q *Queries) CreateShare(ctx context.Context, arg CreateShareParams) (Share, error) {
	row := q.db.QueryRowContext(ctx, createShare, arg.Pubkey, arg.Data, arg.Address)
	var i Share
	err := row.Scan(
		&i.ID,
		&i.Pubkey,
		&i.Data,
		&i.Enable,
		&i.Notification,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}

const getShare = `-- name: GetShare :one
SELECT id, pubkey, data, enable, notification, address, created_at
FROM shares
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetShare(ctx context.Context, id int64) (Share, error) {
	row := q.db.QueryRowContext(ctx, getShare, id)
	var i Share
	err := row.Scan(
		&i.ID,
		&i.Pubkey,
		&i.Data,
		&i.Enable,
		&i.Notification,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}

const getShareByAddress = `-- name: GetShareByAddress :one
SELECT id, pubkey, data, enable, notification, address, created_at
FROM shares
WHERE LOWER(address) = LOWER($1) LIMIT 1
`

func (q *Queries) GetShareByAddress(ctx context.Context, address string) (Share, error) {
	row := q.db.QueryRowContext(ctx, getShareByAddress, address)
	var i Share
	err := row.Scan(
		&i.ID,
		&i.Pubkey,
		&i.Data,
		&i.Enable,
		&i.Notification,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}

const getShareByPubkey = `-- name: GetShareByPubkey :one
SELECT id, pubkey, data, enable, notification, address, created_at
FROM shares
WHERE LOWER(pubkey) = LOWER($1) LIMIT 1
`

func (q *Queries) GetShareByPubkey(ctx context.Context, pubkey string) (Share, error) {
	row := q.db.QueryRowContext(ctx, getShareByPubkey, pubkey)
	var i Share
	err := row.Scan(
		&i.ID,
		&i.Pubkey,
		&i.Data,
		&i.Enable,
		&i.Notification,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}

const listShare = `-- name: ListShare :many
SELECT id, pubkey, data, enable, notification, address, created_at
FROM shares
ORDER BY id LIMIT $1
OFFSET $2
`

type ListShareParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListShare(ctx context.Context, arg ListShareParams) ([]Share, error) {
	rows, err := q.db.QueryContext(ctx, listShare, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Share{}
	for rows.Next() {
		var i Share
		if err := rows.Scan(
			&i.ID,
			&i.Pubkey,
			&i.Data,
			&i.Enable,
			&i.Notification,
			&i.Address,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
