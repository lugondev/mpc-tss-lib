// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: evm.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const addChain = `-- name: AddChain :one
INSERT INTO chains (name, rpcs, chain_id)
VALUES ($1, $2, $3) RETURNING id, name, rpcs, chain_id, updated_at
`

type AddChainParams struct {
	Name    string   `json:"name"`
	Rpcs    []string `json:"rpcs"`
	ChainID int64    `json:"chain_id"`
}

func (q *Queries) AddChain(ctx context.Context, arg AddChainParams) (Chain, error) {
	row := q.db.QueryRowContext(ctx, addChain, arg.Name, pq.Array(arg.Rpcs), arg.ChainID)
	var i Chain
	err := row.Scan(
		&i.ID,
		&i.Name,
		pq.Array(&i.Rpcs),
		&i.ChainID,
		&i.UpdatedAt,
	)
	return i, err
}

const getChain = `-- name: GetChain :one
SELECT id, name, rpcs, chain_id, updated_at
FROM chains
WHERE chain_id = $1 LIMIT 1
`

func (q *Queries) GetChain(ctx context.Context, chainID int64) (Chain, error) {
	row := q.db.QueryRowContext(ctx, getChain, chainID)
	var i Chain
	err := row.Scan(
		&i.ID,
		&i.Name,
		pq.Array(&i.Rpcs),
		&i.ChainID,
		&i.UpdatedAt,
	)
	return i, err
}

const listChains = `-- name: ListChains :many
SELECT id, name, rpcs, chain_id, updated_at
FROM chains
`

func (q *Queries) ListChains(ctx context.Context) ([]Chain, error) {
	rows, err := q.db.QueryContext(ctx, listChains)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Chain{}
	for rows.Next() {
		var i Chain
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			pq.Array(&i.Rpcs),
			&i.ChainID,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
