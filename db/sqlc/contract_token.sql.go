// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: contract_token.sql

package db

import (
	"context"
)

const addTokenToContract = `-- name: AddTokenToContract :one
INSERT INTO tokens_contract (contract_id, name, symbol, token, decimals)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, contract_id, name, symbol, token, decimals, updated_at
`

type AddTokenToContractParams struct {
	ContractID int64  `json:"contract_id"`
	Name       string `json:"name"`
	Symbol     string `json:"symbol"`
	Token      string `json:"token"`
	Decimals   int64  `json:"decimals"`
}

func (q *Queries) AddTokenToContract(ctx context.Context, arg AddTokenToContractParams) (TokensContract, error) {
	row := q.db.QueryRowContext(ctx, addTokenToContract,
		arg.ContractID,
		arg.Name,
		arg.Symbol,
		arg.Token,
		arg.Decimals,
	)
	var i TokensContract
	err := row.Scan(
		&i.ID,
		&i.ContractID,
		&i.Name,
		&i.Symbol,
		&i.Token,
		&i.Decimals,
		&i.UpdatedAt,
	)
	return i, err
}

const addTokenToContractByAddress = `-- name: AddTokenToContractByAddress :one
INSERT
INTO tokens_contract (contract_id, name, symbol, token, decimals)
VALUES ((SELECT id as contract_id FROM contracts WHERE LOWER(address) = LOWER($4)), $1, $2, LOWER($5), $3)
RETURNING id, contract_id, name, symbol, token, decimals, updated_at
`

type AddTokenToContractByAddressParams struct {
	Name     string `json:"name"`
	Symbol   string `json:"symbol"`
	Decimals int64  `json:"decimals"`
	Address  string `json:"address"`
	Token    string `json:"token"`
}

func (q *Queries) AddTokenToContractByAddress(ctx context.Context, arg AddTokenToContractByAddressParams) (TokensContract, error) {
	row := q.db.QueryRowContext(ctx, addTokenToContractByAddress,
		arg.Name,
		arg.Symbol,
		arg.Decimals,
		arg.Address,
		arg.Token,
	)
	var i TokensContract
	err := row.Scan(
		&i.ID,
		&i.ContractID,
		&i.Name,
		&i.Symbol,
		&i.Token,
		&i.Decimals,
		&i.UpdatedAt,
	)
	return i, err
}

const listTokenInContract = `-- name: ListTokenInContract :many
SELECT id, contract_id, name, symbol, token, decimals, updated_at
FROM tokens_contract
WHERE contract_id = $1
`

func (q *Queries) ListTokenInContract(ctx context.Context, contractID int64) ([]TokensContract, error) {
	rows, err := q.db.QueryContext(ctx, listTokenInContract, contractID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TokensContract{}
	for rows.Next() {
		var i TokensContract
		if err := rows.Scan(
			&i.ID,
			&i.ContractID,
			&i.Name,
			&i.Symbol,
			&i.Token,
			&i.Decimals,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTokenInContractByAddress = `-- name: ListTokenInContractByAddress :many
SELECT id, contract_id, name, symbol, token, decimals, updated_at
FROM tokens_contract
WHERE contract_id = (SELECT id
                     FROM contracts
                     WHERE LOWER(address) = LOWER($1))
`

func (q *Queries) ListTokenInContractByAddress(ctx context.Context, address string) ([]TokensContract, error) {
	rows, err := q.db.QueryContext(ctx, listTokenInContractByAddress, address)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TokensContract{}
	for rows.Next() {
		var i TokensContract
		if err := rows.Scan(
			&i.ID,
			&i.ContractID,
			&i.Name,
			&i.Symbol,
			&i.Token,
			&i.Decimals,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeTokenFromContract = `-- name: RemoveTokenFromContract :exec
DELETE
FROM tokens_contract
WHERE contract_id = $1
  AND LOWER(token) = LOWER($2)
`

type RemoveTokenFromContractParams struct {
	ContractID int64  `json:"contract_id"`
	Token      string `json:"token"`
}

func (q *Queries) RemoveTokenFromContract(ctx context.Context, arg RemoveTokenFromContractParams) error {
	_, err := q.db.ExecContext(ctx, removeTokenFromContract, arg.ContractID, arg.Token)
	return err
}

const removeTokenFromContractByAddress = `-- name: RemoveTokenFromContractByAddress :exec
DELETE
FROM tokens_contract
WHERE contract_id = (SELECT id
                     FROM contracts
                     WHERE LOWER(address) = LOWER($1))
  AND LOWER(token) = LOWER($2)
`

type RemoveTokenFromContractByAddressParams struct {
	Address string `json:"address"`
	Token   string `json:"token"`
}

func (q *Queries) RemoveTokenFromContractByAddress(ctx context.Context, arg RemoveTokenFromContractByAddressParams) error {
	_, err := q.db.ExecContext(ctx, removeTokenFromContractByAddress, arg.Address, arg.Token)
	return err
}
