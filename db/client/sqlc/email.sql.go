// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: email.sql

package db_client

import (
	"context"
)

const addEmail = `-- name: AddEmail :one
INSERT INTO emails (name, email)
VALUES ($1, lower($2::text))
RETURNING id, name, email, created_at
`

type AddEmailParams struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}

func (q *Queries) AddEmail(ctx context.Context, arg AddEmailParams) (Email, error) {
	row := q.db.QueryRowContext(ctx, addEmail, arg.Name, arg.Email)
	var i Email
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEmail = `-- name: DeleteEmail :exec
DELETE
FROM emails
WHERE id = $1
`

func (q *Queries) DeleteEmail(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEmail, id)
	return err
}

const getEmail = `-- name: GetEmail :one
SELECT id, name, email, created_at
FROM emails
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetEmail(ctx context.Context, id int64) (Email, error) {
	row := q.db.QueryRowContext(ctx, getEmail, id)
	var i Email
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const listEmails = `-- name: ListEmails :many
SELECT id, name, email, created_at
FROM emails
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListEmailsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEmails(ctx context.Context, arg ListEmailsParams) ([]Email, error) {
	rows, err := q.db.QueryContext(ctx, listEmails, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Email{}
	for rows.Next() {
		var i Email
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmail = `-- name: UpdateEmail :one
UPDATE emails
SET name = $2
WHERE id = $1
RETURNING id, name, email, created_at
`

type UpdateEmailParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateEmail(ctx context.Context, arg UpdateEmailParams) (Email, error) {
	row := q.db.QueryRowContext(ctx, updateEmail, arg.ID, arg.Name)
	var i Email
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}
