// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package db_gateway

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type RequisitionStatus string

const (
	RequisitionStatusPending RequisitionStatus = "pending"
	RequisitionStatusFailure RequisitionStatus = "failure"
	RequisitionStatusSuccess RequisitionStatus = "success"
)

func (e *RequisitionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RequisitionStatus(s)
	case string:
		*e = RequisitionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for RequisitionStatus: %T", src)
	}
	return nil
}

type NullRequisitionStatus struct {
	RequisitionStatus RequisitionStatus
	Valid             bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRequisitionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.RequisitionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RequisitionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRequisitionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.RequisitionStatus, nil
}

type RequisitionType string

const (
	RequisitionTypeKeygen  RequisitionType = "keygen"
	RequisitionTypeSign    RequisitionType = "sign"
	RequisitionTypeReshare RequisitionType = "reshare"
)

func (e *RequisitionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RequisitionType(s)
	case string:
		*e = RequisitionType(s)
	default:
		return fmt.Errorf("unsupported scan type for RequisitionType: %T", src)
	}
	return nil
}

type NullRequisitionType struct {
	RequisitionType RequisitionType
	Valid           bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRequisitionType) Scan(value interface{}) error {
	if value == nil {
		ns.RequisitionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RequisitionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRequisitionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.RequisitionType, nil
}

type Requisition struct {
	ID          int64             `json:"id"`
	Requisition string            `json:"requisition"`
	Pubkey      string            `json:"pubkey"`
	Data        []byte            `json:"data"`
	Reasons     string            `json:"reasons"`
	Username    string            `json:"username"`
	Tenant      string            `json:"tenant"`
	RetryTimes  int32             `json:"retryTimes"`
	Type        RequisitionType   `json:"type"`
	Status      RequisitionStatus `json:"status"`
	CreatedAt   time.Time         `json:"created_at"`
	UpdatedAt   time.Time         `json:"updated_at"`
}
