// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: mpc_client.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MpcPartyClient is the client API for MpcParty service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MpcPartyClient interface {
	RequestParty(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*RequestPartyResponse, error)
	KeygenGenerator(ctx context.Context, in *KeygenGeneratorParams, opts ...grpc.CallOption) (*KeygenGeneratorResponse, error)
	GetParty(ctx context.Context, in *GetPartyParams, opts ...grpc.CallOption) (*GetPartyResponse, error)
	GetParties(ctx context.Context, in *GetPartiesParams, opts ...grpc.CallOption) (*GetPartiesResponse, error)
	Sign(ctx context.Context, in *SignParams, opts ...grpc.CallOption) (*SignResponse, error)
	Ping(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*Pong, error)
}

type mpcPartyClient struct {
	cc grpc.ClientConnInterface
}

func NewMpcPartyClient(cc grpc.ClientConnInterface) MpcPartyClient {
	return &mpcPartyClient{cc}
}

func (c *mpcPartyClient) RequestParty(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*RequestPartyResponse, error) {
	out := new(RequestPartyResponse)
	err := c.cc.Invoke(ctx, "/pb.MpcParty/RequestParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpcPartyClient) KeygenGenerator(ctx context.Context, in *KeygenGeneratorParams, opts ...grpc.CallOption) (*KeygenGeneratorResponse, error) {
	out := new(KeygenGeneratorResponse)
	err := c.cc.Invoke(ctx, "/pb.MpcParty/KeygenGenerator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpcPartyClient) GetParty(ctx context.Context, in *GetPartyParams, opts ...grpc.CallOption) (*GetPartyResponse, error) {
	out := new(GetPartyResponse)
	err := c.cc.Invoke(ctx, "/pb.MpcParty/GetParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpcPartyClient) GetParties(ctx context.Context, in *GetPartiesParams, opts ...grpc.CallOption) (*GetPartiesResponse, error) {
	out := new(GetPartiesResponse)
	err := c.cc.Invoke(ctx, "/pb.MpcParty/GetParties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpcPartyClient) Sign(ctx context.Context, in *SignParams, opts ...grpc.CallOption) (*SignResponse, error) {
	out := new(SignResponse)
	err := c.cc.Invoke(ctx, "/pb.MpcParty/Sign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpcPartyClient) Ping(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/pb.MpcParty/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MpcPartyServer is the server API for MpcParty service.
// All implementations must embed UnimplementedMpcPartyServer
// for forward compatibility
type MpcPartyServer interface {
	RequestParty(context.Context, *EmptyParams) (*RequestPartyResponse, error)
	KeygenGenerator(context.Context, *KeygenGeneratorParams) (*KeygenGeneratorResponse, error)
	GetParty(context.Context, *GetPartyParams) (*GetPartyResponse, error)
	GetParties(context.Context, *GetPartiesParams) (*GetPartiesResponse, error)
	Sign(context.Context, *SignParams) (*SignResponse, error)
	Ping(context.Context, *EmptyParams) (*Pong, error)
	mustEmbedUnimplementedMpcPartyServer()
}

// UnimplementedMpcPartyServer must be embedded to have forward compatible implementations.
type UnimplementedMpcPartyServer struct {
}

func (UnimplementedMpcPartyServer) RequestParty(context.Context, *EmptyParams) (*RequestPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestParty not implemented")
}
func (UnimplementedMpcPartyServer) KeygenGenerator(context.Context, *KeygenGeneratorParams) (*KeygenGeneratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeygenGenerator not implemented")
}
func (UnimplementedMpcPartyServer) GetParty(context.Context, *GetPartyParams) (*GetPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParty not implemented")
}
func (UnimplementedMpcPartyServer) GetParties(context.Context, *GetPartiesParams) (*GetPartiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParties not implemented")
}
func (UnimplementedMpcPartyServer) Sign(context.Context, *SignParams) (*SignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sign not implemented")
}
func (UnimplementedMpcPartyServer) Ping(context.Context, *EmptyParams) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedMpcPartyServer) mustEmbedUnimplementedMpcPartyServer() {}

// UnsafeMpcPartyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MpcPartyServer will
// result in compilation errors.
type UnsafeMpcPartyServer interface {
	mustEmbedUnimplementedMpcPartyServer()
}

func RegisterMpcPartyServer(s grpc.ServiceRegistrar, srv MpcPartyServer) {
	s.RegisterService(&MpcParty_ServiceDesc, srv)
}

func _MpcParty_RequestParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpcPartyServer).RequestParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MpcParty/RequestParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpcPartyServer).RequestParty(ctx, req.(*EmptyParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MpcParty_KeygenGenerator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeygenGeneratorParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpcPartyServer).KeygenGenerator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MpcParty/KeygenGenerator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpcPartyServer).KeygenGenerator(ctx, req.(*KeygenGeneratorParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MpcParty_GetParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartyParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpcPartyServer).GetParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MpcParty/GetParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpcPartyServer).GetParty(ctx, req.(*GetPartyParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MpcParty_GetParties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartiesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpcPartyServer).GetParties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MpcParty/GetParties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpcPartyServer).GetParties(ctx, req.(*GetPartiesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MpcParty_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpcPartyServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MpcParty/Sign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpcPartyServer).Sign(ctx, req.(*SignParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MpcParty_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpcPartyServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MpcParty/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpcPartyServer).Ping(ctx, req.(*EmptyParams))
	}
	return interceptor(ctx, in, info, handler)
}

// MpcParty_ServiceDesc is the grpc.ServiceDesc for MpcParty service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MpcParty_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MpcParty",
	HandlerType: (*MpcPartyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestParty",
			Handler:    _MpcParty_RequestParty_Handler,
		},
		{
			MethodName: "KeygenGenerator",
			Handler:    _MpcParty_KeygenGenerator_Handler,
		},
		{
			MethodName: "GetParty",
			Handler:    _MpcParty_GetParty_Handler,
		},
		{
			MethodName: "GetParties",
			Handler:    _MpcParty_GetParties_Handler,
		},
		{
			MethodName: "Sign",
			Handler:    _MpcParty_Sign_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _MpcParty_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mpc_client.proto",
}
